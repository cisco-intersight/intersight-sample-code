{
	"directories": [
		{
			"name": "profile",
			"displayName": "Profile",
			"subDirectories": [
				{
					"name": "ucs_chassis_profile",
					"displayName": "UCS Chassis Profile",
					"codesample": {
						"ansible": "ucs_chassis_profile.yaml",
						"python": "ucs_chassis_profile.py",
						"powershell": "ucs_chassis_profile.ps1",
						"terraform": "ucs_chassis_profile.tf",
						"openapi": "ucs_chassis_profile.json"
					},
					"files": [
						"readme.md"
					]
				},
				{
					"name": "ucs_domain_profile",
					"displayName": "UCS Domain Profile",
					"codesample": {
						"ansible": "ucs_domain_profile.yaml",
						"python": "ucs_domain_profile.py",
						"powershell": "ucs_domain_profile.ps1",
						"terraform": "ucs_domain_profile.tf",
						"openapi": "ucs_domain_profile.json"
					},
					"files": [
						"readme.md"
					]
				},
				{
					"name": "ucs_server_profile",
					"displayName": "UCS Server Profile",
					"codesample": {
						"ansible": "ucs_server_profile.yaml",
						"python": "ucs_server_profile.py",
						"powershell": "ucs_server_profile.ps1",
						"terraform": "ucs_server_profile.tf",
						"openapi": "ucs_server_profile.json"
					},
					"files": [
						"readme.md"
					]
				}
			]
		},
		{
			"name": "template",
			"displayName": "Template",
			"subDirectories": [
				{
					"name": "ucs_server_profile_template",
					"displayName": "UCS Server Profile Template",
					"codesample": {
						"ansible": "ucs_server_profile_template.yaml",
						"python": "ucs_server_profile_template.py",
						"powershell": "ucs_server_profile_template.ps1",
						"terraform": "ucs_server_profile_template.tf",
						"openapi": "ucs_server_profile_template.json"
					},
					"files": [
						"readme.md"
					]
				}
			]
		},
		{
			"name": "policies",
			"displayName": "Policies",
			"subDirectories": [
				{
					"name": "ucs_server_policies",
					"displayName": "UCS Server",
					"showAnchors": true,
					"subDirectories": [
						{
							"name": "compute",
							"displayName": "Compute",
							"subDirectories": [
								{
									"name": "bios_policy",
									"displayName": "Bios Policy",
									"descriptions": "Automates the configuration of BIOS settings on the managed devices. You can create one or more BIOS policies which contain a specific grouping of BIOS settings. If you do not specify a BIOS policy for a server, the BIOS settings remain as they are. If a BIOS policy is specified, the values that are specified in the policy replace any previously configured values on a server (including bare metal server configuration settings). To apply the BIOS policy settings, you must reboot the server.",
									"codesample": {
										"ansible": "bios_policy.yaml",
										"python": "bios_policy.py",
										"powershell": "bios_policy.ps1",
										"terraform": "bios_policy.tf",
										"openapi": "bios_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "boot_order_policy",
									"displayName": "Boot Order Policy",
									"descriptions": "Configures the linear ordering of devices and enables you to change the boot order and boot mode. You can also add multiple devices under various device types, rearrange the boot order, and set parameters for each boot device type.",
									"codesample": {
										"ansible": "boot_order_policy.yaml",
										"python": "boot_order_policy.py",
										"powershell": "boot_order_policy.ps1",
										"terraform": "boot_order_policy.tf",
										"openapi": "boot_order_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "power_policy",
									"displayName": "Power Policy",
									"descriptions": "Enables the management of power for FI-attached servers and chassis. This policy allows you to set the power profiling the power priority of the server, and the power restore state of the system",
									"codesample": {
										"ansible": "power_policy.yaml",
										"python": "power_policy.py",
										"powershell": "power_policy.ps1",
										"terraform": "power_policy.tf",
										"openapi": "power_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "virtual_media_policy",
									"displayName": "Virtual Media Policy",
									"descriptions": "Enables you to install an Operating System on the server using the KVM console and virtual media, mount files to the host from a remote file share, and enable virtual media encryption. You can create one or more Virtual Media policies, which can contain virtual media mappings for different OS images, and configure up to two virtual media mappings, one for ISO files (through CDD), and the other for IMG files (through HDD).",
									"codesample": {
										"ansible": "virtual_media_policy.yaml",
										"python": "virtual_media_policy.py",
										"powershell": "virtual_media_policy.ps1",
										"terraform": "virtual_media_policy.tf",
										"openapi": "virtual_media_policy.json"
									},
									"files": [
										"readme.md"
									]
								}
							]
						},
						{
							"name": "management",
							"displayName": "Management",
							"subDirectories": [
								{
									"name": "imc_access_policy",
									"displayName": "IMC Access Policy",
									"descriptions": "Enables to manage and configure your network through mapping of IP pools to the server profile. This policy allows you to configure a VLAN and associate it with an IP address through the IP pool address.",
									"codesample": {
										"ansible": "imc_access_policy.yaml",
										"python": "imc_access_policy.py",
										"powershell": "imc_access_policy.ps1",
										"terraform": "imc_access_policy.tf",
										"openapi": "imc_access_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "ipmi_over_lan_policy",
									"displayName": "IPMI Over LAN Policy",
									"descriptions": "Defines the protocols for interfacing with a service processor that is embedded in a server platform. The Intelligent Platform Management Interface (IPMI) enables an operating system to obtain information about the system health and control system hardware and directs the Cisco IMC to perform the required actions. You can create an IPMI Over LAN policy to manage the IPMI messages through Cisco Intersight.",
									"codesample": {
										"ansible": "ipmi_over_lan_policy.yaml",
										"python": "ipmi_over_lan_policy.py",
										"powershell": "ipmi_over_lan_policy.ps1",
										"terraform": "ipmi_over_lan_policy.tf",
										"openapi": "ipmi_over_lan_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "local_user_policy",
									"displayName": "Local User Policy",
									"descriptions": "Automates the configuration of local user preferences. You can create one or more Local User policies which contain a list of local users that need to be configured.",
									"codesample": {
										"ansible": "local_user_policy.yaml",
										"python": "local_user_policy.py",
										"powershell": "local_user_policy.ps1",
										"terraform": "local_user_policy.tf",
										"openapi": "local_user_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "serial_over_lan_policy",
									"displayName": "Serial Over LAN Policy",
									"descriptions": "Policy description",
									"codesample": {
										"ansible": "serial_over_lan_policy.yaml",
										"python": "serial_over_lan_policy.py",
										"powershell": "serial_over_lan_policy.ps1",
										"terraform": "serial_over_lan_policy.tf",
										"openapi": "serial_over_lan_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "snmp_policy",
									"displayName": "SNMP Policy",
									"descriptions": "Policy description",
									"codesample": {
										"ansible": "snmp_policy.yaml",
										"python": "snmp_policy.py",
										"powershell": "snmp_policy.ps1",
										"terraform": "snmp_policy.tf",
										"openapi": "snmp_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "syslog_policy",
									"displayName": "Syslog Policy",
									"descriptions": "Defines the logging level (minimum severity) to report for a log file collected from an endpoint, the target destination to store the Syslog messages, and the Hostname/IP Address, port information, and communication protocol for the Remote Logging Server(s).",
									"codesample": {
										"ansible": "syslog_policy.yaml",
										"python": "syslog_policy.py",
										"powershell": "syslog_policy.ps1",
										"terraform": "syslog_policy.tf",
										"openapi": "syslog_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "virtual_kvm_policy",
									"displayName": "Virtual KVM Policy",
									"descriptions": "Enables specific grouping of virtual KVM properties. This policy allows you specify the number of allowed concurrent KVM sessions, port information, and video encryption options.",
									"codesample": {
										"ansible": "virtual_kvm_policy.yaml",
										"python": "virtual_kvm_policy.py",
										"powershell": "virtual_kvm_policy.ps1",
										"terraform": "virtual_kvm_policy.tf",
										"openapi": "virtual_kvm_policy.json"
									},
									"files": [
										"readme.md"
									]
								}
							]
						},
						{
							"name": "misc",
							"displayName": "misc",
							"subDirectories": [
								{
									"name": "ldap_policy",
									"displayName": "LDAP Policy",
									"descriptions": "Specifies the LDAP configuration settings and preferences for an endpoint. The endpoints support LDAP to store and maintain directory information in a network. The LDAP policy determines configuration settings for LDAP Servers, DNS parameters including options to obtain a domain name used for the DNS SRV request, Binding methods, Search parameters, and Group Authorization preferences. Through an LDAP policy, you can also create multiple LDAP groups and add them to the LDAP server database.",
									"codesample": {
										"ansible": "ldap_policy.yaml",
										"python": "ldap_policy.py",
										"powershell": "ldap_policy.ps1",
										"terraform": "ldap_policy.tf",
										"openapi": "ldap_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "ntp_policy",
									"displayName": "Ntp Policy",
									"descriptions": "Allows you to enable the NTP service on an Intersight Managed Cisco IMC (Standalone) server. The NTP service synchronizes the time with an NTP server. You must enable and configure the NTP service by specifying the IP address or DNS of a minimum of one to a maximum of four NTP servers.",
									"codesample": {
										"ansible": "ntp_policy.yaml",
										"python": "ntp_policy.py",
										"powershell": "ntp_policy.ps1",
										"terraform": "ntp_policy.tf",
										"openapi": "ntp_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "smtp_policy",
									"displayName": "SMTP Policy",
									"descriptions": "Sets the state of the SMTP client in the managed device. You can specify the preferred settings for outgoing communication and select the fault severity level to report and the mail recipients.",
									"codesample": {
										"ansible": "smtp_policy.yaml",
										"python": "smtp_policy.py",
										"powershell": "smtp_policy.ps1",
										"terraform": "smtp_policy.tf",
										"openapi": "smtp_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "ssh_policy",
									"displayName": "SSH Policy",
									"descriptions": "Enables an SSH client to make a secure, encrypted connection. You can create one or more SSH policies that contain a specific grouping of SSH properties for a server or a set of servers.",
									"codesample": {
										"ansible": "ssh_policy.yaml",
										"python": "ssh_policy.py",
										"powershell": "ssh_policy.ps1",
										"terraform": "ssh_policy.tf",
										"openapi": "ssh_policy.json"
									},
									"files": [
										"readme.md"
									]
								}
							]
						},
						{
							"name": "network",
							"displayName": "Network",
							"subDirectories": [
								{
									"name": "adapter_configuration_policy",
									"displayName": "Adapter Configuration Policy",
									"descriptions": "Configures the Ethernet and Fibre-Channel settings for the VIC adapter",
									"codesample": {
										"ansible": "adapter_configuration_policy.yaml",
										"python": "adapter_configuration_policy.py",
										"powershell": "adapter_configuration_policy.ps1",
										"terraform": "adapter_configuration_policy.tf",
										"openapi": "adapter_configuration_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "ethernet_adapter_policy",
									"displayName": "Ethernet Adapter Policy",
									"descriptions": "Governs the host-side behavior of the adapter, including how the adapter handles traffic. For each VIC Virtual Ethernet Interface, you can configure various features such as VXLAN, NVGRE, ARFS, Interrupt settings, and TCP Offload settings.",
									"codesample": {
										"ansible": "ethernet_adapter_policy.yaml",
										"python": "ethernet_adapter_policy.py",
										"powershell": "ethernet_adapter_policy.ps1",
										"terraform": "ethernet_adapter_policy.tf",
										"openapi": "ethernet_adapter_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "ethernet_network_control_policy",
									"displayName": "Ethernet Network Control Policy",
									"descriptions": "Configures the network control settings for the appliance ports, appliance port channels, or vNICs.",
									"codesample": {
										"ansible": "ethernet_network_control_policy.yaml",
										"python": "ethernet_network_control_policy.py",
										"powershell": "ethernet_network_control_policy.ps1",
										"terraform": "ethernet_network_control_policy.tf",
										"openapi": "ethernet_network_control_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "ethernet_network_group_policy",
									"displayName": "Ethernet Network Group Policy",
									"descriptions": "Configures the VLAN settings that include Native VLAN and QinQ VLAN for appliance ports, appliance port channels, or vNICs.",
									"codesample": {
										"ansible": "ethernet_network_group_policy.yaml",
										"python": "ethernet_network_group_policy.py",
										"powershell": "ethernet_network_group_policy.ps1",
										"terraform": "ethernet_network_group_policy.tf",
										"openapi": "ethernet_network_group_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "ethernet_network_policy",
									"displayName": "Ethernet Network Policy",
									"descriptions": "Allows to define the port to carry single VLAN(Access) or multiple VLANs(Trunk) traffic. You can configure the Default VLAN and QinQ VLAN settings for vNICs. You can specify the VLAN to be associated with an Ethernet packet if no tag is found.",
									"codesample": {
										"ansible": "ethernet_network_policy.yaml",
										"python": "ethernet_network_policy.py",
										"powershell": "ethernet_network_policy.ps1",
										"terraform": "ethernet_network_policy.tf",
										"openapi": "ethernet_network_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "ethernet_qos_policy",
									"displayName": "Ethernet Qos Policy",
									"descriptions": "Assigns a system class to the outgoing traffic for a vNIC. This system class determines the quality of service for the outgoing traffic. For certain adapters, you can also specify additional controls like burst and rate on the outgoing traffic.",
									"codesample": {
										"ansible": "ethernet_qos_policy.yaml",
										"python": "ethernet_qos_policy.py",
										"powershell": "ethernet_qos_policy.ps1",
										"terraform": "ethernet_qos_policy.tf",
										"openapi": "ethernet_qos_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "lan_connectivity_policy",
									"displayName": "LAN Connectivity Policy",
									"descriptions": "Determines the connections and the network communication resources between the server and the LAN on the network. You must create the Ethernet Adapter, Ethernet QoS, and Ethernet Network policies as part of the LAN connectivity policy.",
									"codesample": {
										"ansible": "lan_connectivity_policy.yaml",
										"python": "lan_connectivity_policy.py",
										"powershell": "lan_connectivity_policy.ps1",
										"terraform": "lan_connectivity_policy.tf",
										"openapi": "lan_connectivity_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "network_connectivity_policy",
									"displayName": "Network Connectivity Policy",
									"descriptions": "Specifies the DNS Domain settings that are used to add or update the resource records on the DNS server from the endpoints, and the DNS server settings for IPv4 and IPv6 on an endpoint.",
									"codesample": {
										"ansible": "network_connectivity_policy.yaml",
										"python": "network_connectivity_policy.py",
										"powershell": "network_connectivity_policy.ps1",
										"terraform": "network_connectivity_policy.tf",
										"openapi": "network_connectivity_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "san_connectivity_policy",
									"displayName": "SAN Connectivity Policy",
									"descriptions": "Determines the network storage resources and the connections between the server and the SAN on the network.",
									"codesample": {
										"ansible": "san_connectivity_policy.yaml",
										"python": "san_connectivity_policy.py",
										"powershell": "san_connectivity_policy.ps1",
										"terraform": "san_connectivity_policy.tf",
										"openapi": "san_connectivity_policy.json"
									},
									"files": [
										"readme.md"
									]
								}
							]
						},
						{
							"name": "storage",
							"displayName": "Storage",
							"subDirectories": [
								{
									"name": "device_connector_policy",
									"displayName": "Device Connector Policy",
									"descriptions": "Lets you choose the Configuration from Intersight only option to control configuration changes allowed from Cisco IMC.",
									"codesample": {
										"ansible": "device_connector_policy.yaml",
										"python": "device_connector_policy.py",
										"powershell": "device_connector_policy.ps1",
										"terraform": "device_connector_policy.tf",
										"openapi": "device_connector_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "fiber_channel_adapter_policy",
									"displayName": "Fiber Channel Adapter Policy",
									"descriptions": "Policy description",
									"codesample": {
										"ansible": "fiber_channel_adapter_policy.yaml",
										"python": "fiber_channel_adapter_policy.py",
										"powershell": "fiber_channel_adapter_policy.ps1",
										"terraform": "fiber_channel_adapter_policy.tf",
										"openapi": "fiber_channel_adapter_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "fiber_channel_network_policy",
									"displayName": "Fiber Channel Network Policy",
									"descriptions": "Policy description",
									"codesample": {
										"ansible": "fiber_channel_network_policy.yaml",
										"python": "fiber_channel_network_policy.py",
										"powershell": "fiber_channel_network_policy.ps1",
										"terraform": "fiber_channel_network_policy.tf",
										"openapi": "fiber_channel_network_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "fiber_channel_qos_policy",
									"displayName": "Fiber Channel Qos Policy",
									"descriptions": "Policy description",
									"codesample": {
										"ansible": "fiber_channel_qos_policy.yaml",
										"python": "fiber_channel_qos_policy.py",
										"powershell": "fiber_channel_qos_policy.ps1",
										"terraform": "fiber_channel_qos_policy.tf",
										"openapi": "fiber_channel_qos_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "iscsi_adapter_policy",
									"displayName": "ISCSI Adapter Policy",
									"descriptions": "Policy description",
									"codesample": {
										"ansible": "iscsi_adapter_policy.yaml",
										"python": "iscsi_adapter_policy.py",
										"powershell": "iscsi_adapter_policy.ps1",
										"terraform": "iscsi_adapter_policy.tf",
										"openapi": "iscsi_adapter_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "iscsi_boot_policy",
									"displayName": "ISCSI Boot Policy",
									"descriptions": "Policy description",
									"codesample": {
										"ansible": "iscsi_boot_policy.yaml",
										"python": "iscsi_boot_policy.py",
										"powershell": "iscsi_boot_policy.ps1",
										"terraform": "iscsi_boot_policy.tf",
										"openapi": "iscsi_boot_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "iscsi_static_target_policy",
									"displayName": "ISCSI Static Target Policy",
									"descriptions": "Policy description",
									"codesample": {
										"ansible": "iscsi_static_target_policy.yaml",
										"python": "iscsi_static_target_policy.py",
										"powershell": "iscsi_static_target_policy.ps1",
										"terraform": "iscsi_static_target_policy.tf",
										"openapi": "iscsi_static_target_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "sd_card_policy",
									"displayName": "SD Card Policy",
									"descriptions": "Configures the Cisco FlexFlash and FlexUtil Secure Digital (SD) cards for the Cisco UCS C-Series Standalone M4 and M5 servers.",
									"codesample": {
										"ansible": "sd_card_policy.yaml",
										"python": "sd_card_policy.py",
										"powershell": "sd_card_policy.ps1",
										"terraform": "sd_card_policy.tf",
										"openapi": "sd_card_policy.json"
									},
									"files": [
										"readme.md"
									]
								},
								{
									"name": "storage_policy",
									"displayName": "Storage Policy",
									"descriptions": "A Storage policy allows you to create drive groups, virtual drives, configure the storage capacity of a virtual drive, and configure the M.2 RAID controllers.",
									"codesample": {
										"ansible": "storage_policy.yaml",
										"python": "storage_policy.py",
										"powershell": "storage_policy.ps1",
										"terraform": "storage_policy.tf",
										"openapi": "storage_policy.json"
									},
									"files": [
										"readme.md"
									]
								}
							]
						}
					]
				},
				{
					"name": "ucs_domain_policies",
					"displayName": "UCS Domain",
					"subDirectories": [
						{
							"name": "flow_control_policy",
							"displayName": "Flow control Policy",
							"descriptions": "Enables configurations for Priority Flow Control for ports and port channels.",
							"codesample": {
								"ansible": "flow_control_policy.yaml",
								"python": "flow_control_policy.py",
								"powershell": "flow_control_policy.ps1",
								"terraform": "flow_control_policy.tf",
								"openapi": "flow_control_policy.json"
							},
							"files": [
								"readme.md"
							]
						},
						{
							"name": "link_aggregation_policy",
							"displayName": "Link Aggregation Policy",
							"descriptions": "Enables to configure Link Aggregation properties. Link Aggregation combines multiple network connections in parallel to increase throughput and to provide redundancy.",
							"codesample": {
								"ansible": "link_aggregation_policy.yaml",
								"python": "link_aggregation_policy.py",
								"powershell": "link_aggregation_policy.ps1",
								"terraform": "link_aggregation_policy.tf",
								"openapi": "link_aggregation_policy.json"
							},
							"files": [
								"readme.md"
							]
						},
						{
							"name": "link_control_policy",
							"displayName": "Link Control Policy",
							"descriptions": "Enables configurations of Link Control administrative state and configuration (normal or aggressive) mode for ports.",
							"codesample": {
								"ansible": "link_control_policy.yaml",
								"python": "link_control_policy.py",
								"powershell": "link_control_policy.ps1",
								"terraform": "link_control_policy.tf",
								"openapi": "link_control_policy.json"
							},
							"files": [
								"readme.md"
							]
						},
						{
							"name": "multicast_policy",
							"displayName": "Multicast Policy",
							"descriptions": "Configures Internet Group Management Protocol (IGMP) snooping and IGMP querier. IGMP Snooping dynamically determines hosts in a VLAN that should be included in multicast transmissions.",
							"codesample": {
								"ansible": "multicast_policy.yaml",
								"python": "multicast_policy.py",
								"powershell": "multicast_policy.ps1",
								"terraform": "multicast_policy.tf",
								"openapi": "multicast_policy.json"
							},
							"files": [
								"readme.md"
							]
						},
						{
							"name": "network_connectivity_policy",
							"displayName": "Network Connectivity Policy",
							"descriptions": "Specifies the DNS Domain settings that are used to add or update the resource records on the DNS server from the endpoints, and the DNS server settings for IPv4 and IPv6 on an endpoint.",
							"codesample": {
								"ansible": "network_connectivity_policy.yaml",
								"python": "network_connectivity_policy.py",
								"powershell": "network_connectivity_policy.ps1",
								"terraform": "network_connectivity_policy.tf",
								"openapi": "network_connectivity_policy.json"
							},
							"files": [
								"readme.md"
							]
						},
						{
							"name": "network_control_policy",
							"displayName": "Network Control Policy",
							"descriptions": "Configures the network control settings for the appliance ports, appliance port channels, or vNICs.",
							"codesample": {
								"ansible": "network_control_policy.yaml",
								"python": "network_control_policy.py",
								"powershell": "network_control_policy.ps1",
								"terraform": "network_control_policy.tf",
								"openapi": "network_control_policy.json"
							},
							"files": [
								"readme.md"
							]
						},
						{
							"name": "network_group_policy",
							"displayName": "Network Group Policy",
							"descriptions": "Configures the VLAN settings that include Native VLAN and QinQ VLAN for appliance ports, appliance port channels, or vNICs.",
							"codesample": {
								"ansible": "network_group_policy.yaml",
								"python": "network_group_policy.py",
								"powershell": "network_group_policy.ps1",
								"terraform": "network_group_policy.tf",
								"openapi": "network_group_policy.json"
							},
							"files": [
								"readme.md"
							]
						},
						{
							"name": "ntp_policy",
							"displayName": "NTP Policy",
							"descriptions": "Allows you to enable the NTP service on an Intersight Managed Cisco IMC (Standalone) server.",
							"codesample": {
								"ansible": "ntp_policy.yaml",
								"python": "ntp_policy.py",
								"powershell": "ntp_policy.ps1",
								"terraform": "ntp_policy.tf",
								"openapi": "ntp_policy.json"
							},
							"files": [
								"readme.md"
							]
						},
						{
							"name": "port_policy",
							"displayName": "Port Policy",
							"descriptions": "Configures the ports and port roles for the Fabric Interconnect. Each Fabric Interconnect has a set of ports in a fixed port module that you can configure.",
							"codesample": {
								"ansible": "port_policy.yaml",
								"python": "port_policy.py",
								"powershell": "port_policy.ps1",
								"terraform": "port_policy.tf",
								"openapi": "port_policy.json"
							},
							"files": [
								"readme.md"
							]
						},
						{
							"name": "snmp_policy",
							"displayName": "SNMP Policy",
							"descriptions": "Policy description",
							"codesample": {
								"ansible": "snmp_policy.yaml",
								"python": "snmp_policy.py",
								"powershell": "snmp_policy.ps1",
								"terraform": "snmp_policy.tf",
								"openapi": "snmp_policy.json"
							},
							"files": [
								"readme.md"
							]
						},
						{
							"name": "switch_control_policy",
							"displayName": "Switch Control Policy",
							"descriptions": "Enables to configure and manage multiple network operations on the Fabric Interconnects.",
							"codesample": {
								"ansible": "switch_control_policy.yaml",
								"python": "switch_control_policy.py",
								"powershell": "switch_control_policy.ps1",
								"terraform": "switch_control_policy.tf",
								"openapi": "switch_control_policy.json"
							},
							"files": [
								"readme.md"
							]
						},
						{
							"name": "syslog_policy",
							"displayName": "Syslog Policy",
							"descriptions": "Defines the logging level (minimum severity) to report for a log file collected from an endpoint, the target destination to store the Syslog messages, and the Hostname/IP Address, port information, and communication protocol for the Remote Logging Server(s).",
							"codesample": {
								"ansible": "syslog_policy.yaml",
								"python": "syslog_policy.py",
								"powershell": "syslog_policy.ps1",
								"terraform": "syslog_policy.tf",
								"openapi": "syslog_policy.json"
							},
							"files": [
								"readme.md"
							]
						},
						{
							"name": "system_qos_policy",
							"displayName": "System Qos Policy",
							"descriptions": "mplements network traffic prioritization based on the importance of the connected network by assigning system classes for individual vNICs.",
							"codesample": {
								"ansible": "system_qos_policy.yaml",
								"python": "system_qos_policy.py",
								"powershell": "system_qos_policy.ps1",
								"terraform": "system_qos_policy.tf",
								"openapi": "system_qos_policy.json"
							},
							"files": [
								"readme.md"
							]
						},
						{
							"name": "vlan_configuration_policy",
							"displayName": "Vlan Configuration Policy",
							"descriptions": "Creates a connection to a specific external LAN.",
							"codesample": {
								"ansible": "vlan_configuration_policy.yaml",
								"python": "vlan_configuration_policy.py",
								"powershell": "vlan_configuration_policy.ps1",
								"terraform": "vlan_configuration_policy.tf",
								"openapi": "vlan_configuration_policy.json"
							},
							"files": [
								"readme.md"
							]
						},
						{
							"name": "vsan_configuration_policy",
							"displayName": "VSAN Configuration Policy",
							"descriptions": "Partitions the Fibre Channel fabric into one or more zones. Each zone defines the set of Fibre Channel initiators and Fibre Channel targets that can communicate with each other in a VSAN.",
							"codesample": {
								"ansible": "vsan_configuration_policy.yaml",
								"python": "vsan_configuration_policy.py",
								"powershell": "vsan_configuration_policy.ps1",
								"terraform": "vsan_configuration_policy.tf",
								"openapi": "vsan_configuration_policy.json"
							},
							"files": [
								"readme.md"
							]
						}
					]
				}
			]
		}
	]
}
